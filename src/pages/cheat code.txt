import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function AssignmentGenerator() {
  const [topic, setTopic] = useState("");
  const [assignments, setAssignments] = useState([]);
  const [loading, setLoading] = useState(false);

  const generateAssignments = async () => {
    setLoading(true);
    const res = await fetch("/api/generate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ topic }),
    });
    const data = await res.json();
    setAssignments(data.assignments);
    setLoading(false);
  };

  return (
    <div className="max-w-3xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-4">AI Assignment Generator</h1>
      <div className="flex gap-2 mb-4">
        <Input
          placeholder="Enter topic (e.g., JavaScript Loops)"
          value={topic}
          onChange={(e) => setTopic(e.target.value)}
        />
        <Button onClick={generateAssignments} disabled={!topic || loading}>
          {loading ? "Generating..." : "Generate"}
        </Button>
      </div>

      <div className="grid gap-4">
        {assignments.map((a, i) => (
          <Card key={i}>
            <CardHeader>
              <CardTitle>{a.title}</CardTitle>
            </CardHeader>
            <CardContent>
              <p>{a.description}</p>
              <p className="text-sm mt-2 text-muted-foreground">
                Level: {a.level}
              </p>
              <p className="text-sm mt-1 text-muted-foreground">
                Evaluation: {a.evaluation}
              </p>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}




// /api/generate.js
import OpenAI from "openai";

const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export default async function handler(req, res) {
  const { topic } = req.body;

  const prompt = `
  You are a web development instructor.
  Generate 3 creative assignments on the topic: ${topic}.
  Format them as JSON with fields: title, description, level, evaluation.
  `;

  const completion = await client.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [{ role: "user", content: prompt }],
  });

  const text = completion.choices[0].message.content;
  const assignments = JSON.parse(text);

  res.status(200).json({ assignments });
}

const prompt = `
You are an expert web development instructor.
Generate 3 assignment ideas on the topic "${topic}".
Each should include:
- Title
- Description
- Expected outcome
- Level (Beginner/Intermediate/Advanced)
- Evaluation criteria
`;


